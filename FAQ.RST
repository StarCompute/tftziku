这里把大家常见的问题汇总于此
##############################################



如何创建字库
************************************************************************

直接运行getunicodeV3.py文件就可以创建你的字库了

文件中下面的代码创建字库

.. code-block::  python

    createFont( FONT_ALL,"P", _font_name, _font_size,_bin_type)

文件中下面的代码验证创建的字库成功并显示：

.. code-block::  python

    getPixDataFromStr("业精于勤荒于嬉戏，行成于思毁于随",_font_lib_name)



如何调整字库内容
************************************************************************

个人强烈建议你使用完整的字库，如果实在不愿意使用，只想创建少数汉字的字库，可以直接修改

.. code-block::  python

    # FONT_ALL = "清澈的爱只为中国1"

中的内容，反注释调上面这句话，调整对应的文字为你需要的内容，然后重新运行python就可以了。
使用这种方法创建字库，比其他现在的字库管理都更方便，少了无数繁琐的过程。
如果你使用PCtoLCD2018 这种方案，要进行各种数据整理，哪怕你只是调整一个字。



如何创建一个16号的 “微软雅黑 细体” 字库
************************************************************************

调整以下代码

.. code-block::  python

    # 下面代码模式设置字号，可以按照偶数进行调整，但是都必须大于12，12以下的显示不全
    _font_size=12

    # 如果打算使用其他字体请修改下面的simsun.ttc,例如微软雅黑是msyh.ttc ，具体请查看windows内fonts目录内的字体。
    _font_name="simsun.ttc"

为

.. code-block::  python

    # 下面代码模式设置字号，可以按照偶数进行调整，但是都必须大于12，12以下的显示不全
    _font_size=16

    # 如果打算使用其他字体请修改下面的simsun.ttc,例如微软雅黑是msyh.ttc ，具体请查看windows内fonts目录内的字体。
    _font_name="msyhl.ttc"



然后运行python文件就可以了。



如何自动上传创建的字库文件
************************************************************************

手动上传字库文件到esp单片机是个很麻烦的事情，所以注释掉getunicodeV3.py文件下面这段代码可以运行，就可以在字库创建后自动上传字库到单片机中

.. code-block::  python

    # import os
    # os.system("cd ..")
    # os.system("move  "+_font_lib_name+" data\\x.font")
    # 请注意检查下面pio.exe 的配置地址和--environment 后esp32dev 应该为你的配置，这个配置就是你platform.ini中的[env:xxx]中这个xxx
    # os.system("C:\\Users\\xuank\\.platformio\\penv\\Scripts\\pio.exe  run --target uploadfs --environment nodemcuv2")


注意：1，调整上面这段代码中pio.exe 的文件位置；2，调整nodemcuv2 为你的配置



如何手动上传创建的字库文件
************************************************************************

详细介绍请参考：
https://blog.csdn.net/platform/article/details/139006314



如何修改字体
************************************************************************

修改创建文件中的 ``simsun.ttc `` 为其他字体的名字，如果你使用windows，请到对应的fonts目录进行查找字库名称；

.. code-block::  
    
    _font_name="simsun.ttc"



如何修改字号
************************************************************************

修改下面代码中对应的数字即可。

.. code-block::  

    _font_size=12



直接使用已经生成的字库
************************************************************************

以下字体分别创建了字库放在了font目录中

simsun.ttc      宋体

simfang.ttf     仿宋

simkai.ttf      楷体

simhei.ttf      黑体




并且已经创建了12，14，16和18号字体，都可以拷贝到data目录下命名为x.font ，上传到单片机直接调用

.. 注意:: 字号的选择：

    由于不同字体本身的特征，有些字体不适合选择16号以下的字号，虽然说有生成。


部分字库和全字库的性能选择
************************************************************************

以下所指显示的内容是：

.. code-block::  

    业精于勤荒于嬉戏，行成于思毁于随。业精于勤荒于嬉戏，行成于思毁于随。业精于勤荒于嬉戏，行成于思毁于随。业精于勤荒于嬉戏，行成于思毁于随。


以下是20个字的字库显示耗时

.. code-block::  

    TFT初始化耗时:0.205000 秒.
    系统总启动和显示耗时：0.422000

以下是全字库，7000多个汉字和字符，显示20多个汉字的耗时


.. code-block::  

    TFT初始化耗时:0.205000 秒.
    系统总启动和显示耗时：0.542000  


全字符的字库比非全字库的显示差了0.1秒，这个依照个人和具体的应用综合考虑。




如何显示更快
************************************************************************

如果你使用esp32 ，整体显示都很快。

由于esp32和eesp8266 内存空间的差异，为了保障稳定性，esp8266在读取字库中的字符集时进行了特殊处理，相对来说就慢了很多，esp32没有这个问题，自然就非常快。


如何显示更快2
************************************************************************

最初一直使用的屏幕驱动是TFT_eSPI,最近才使用Arduino_GFX,本来也没有怎么在意，结果为了极致优化性能，测试发现TFT_eSPI的初始化需要0.62秒，而Arduino_GFX的初始化只要0.2秒，所以建议别再使用TFT_eSPI,或许有一天这个支持都会被我剔除。



还能显示更快吗？
************************************************************************

显示68个字符：总共耗时0.5秒，其中0.2秒是屏幕驱动程序的耗时。
每个文字输出到屏幕耗时0.006秒，其他花费的主要时间是从flash中读取数据。
这个读取是一个定值，是文件系统和flash芯片的限制，基本改变不鸟，所以基本不能显示更快了。

因此，这个答案是否定的。


还能显示更快吗2？
************************************************************************

可以，采取假性显示。
目前对于字符是读取一个显示一个，所以存在着视觉差，让人感觉很里面有个过程。
但是如果一次性把字符数据处理完成，然后一次性显示，这基本上就是即时显示所有文字。
最初就是这么显示的，只是这里面有风险：内存不够。
一个字符16*16=256个像素，10个字符基本就是2k,60个基本上就是12k,在单片机上12k是很大的内存占用，容易导致不稳定。
当然也可以有其他办法，但是都需要考虑这个内存占用问题。
如果内存够多，例如esp32，则可以一定程度忽视这个问题采取这个方法，这样就不会出现一个一个显示的视觉效果了。
新补充的DrawChineseEx 方法实现了这种假性显示，视觉上显示确实是最快的，但是统计上发觉和DrawChinese消耗的时间是一致的。


如何从字库获取字符的像素数据
************************************************************************

有的时候字符的显示并不需要显示到tft屏幕，例如显示到像素屏，这时直接进行如下调用就好了

.. code-block:: 

    String _pixDatas=_xFont->GetPixDatasFromLib("我");
    for(int i=0;i<_pixDatas.length();i++){
        if(i%12==0)Serial.println("");
        if(_pixDatas[i]=='1')Serial.print(_pixDatas[i]);
        else {
        Serial.print(" ");
        }
    }


字符的重画乱码问题
************************************************************************

对某个x,y的文字重新输出的时候，除非带了背景颜色，并不会自动清除之前汉字的显示。
如果不是覆盖，不建议带背景颜色，因为带了背景颜色，屏幕输出计算会多一倍。


字符的颜色显示问题
************************************************************************

arduino_gfx 名义上用的是RGB，但是你选择颜色是RED的时候，可能并没有在屏幕上显示红色，所以你要考虑把RGB换成BGR。
在 对象初始化时：

Arduino_GFX *tft = new Arduino_ST7735(bus,-1,0,false,128,160,0,0,0,0,false);

可以正常显示RGB

Arduino_GFX *tft = new Arduino_ST7735(bus); 

是定义的BGR.

这点要注意，这是个坑。



字体的漂移
************************************************************************

由于不同的字体本身的特征，字库在创建的时候会存在部分漂移的情况，显示不完整，这种请留言联系




TFT屏闪的问题
************************************************************************

TFT本身是不会有屏闪的问题，屏闪是因为主动高频刷新屏幕导致的。

以默认main.cpp中的DrawChineseEx方法为例，它是先获取数据后直接输出到屏幕，它的屏幕输出时间消耗为0.053 秒，人类视觉如果感觉不到闪烁的前提是每秒刷新30次，1/30=0.03s ,也就是说只要这个输出时间本身是在0.03s之下就感觉不到刷新。
上面说的0.053是单独的屏幕显示的时间，不包含读取字库的时间，所以默认显示内容的重复显示肯定会出现屏闪。
解决方法是：

1，显示更少的文字可以极大降低这个屏闪；

2，局部刷新区域，不是全屏刷新，基本绝大部分都是区域刷新的；

3，如果刷新的内容是数字和字母，不建议用DrawChinese相关方法，各个tft 驱动本身自带的drawstring方法中包括了数字和字母字库，不用读取字库，效率极高，是不会有屏闪的，就是要注意自己手动区域清屏或者覆盖背景色；



明明上传字库成功，为啥还提示我找不到字库 
************************************************************************

可能littleFS没有正常工作, 可能运行报错：

.. code-block:: 

    esp_littlefs: mount failed, (-84)
    esp_littlefs: Failed to initialize LittleFS
    begin(): Mounting LittleFS failed! Error: -1
    open(): File system is not mounted


需要在platformio.ini中配置

.. code-block:: 

    board_build.filesystem = littlefs


修改上面的参数后需要重新上传字库，并且编译代码上传。




明明有字库文件，为啥还提示我找不到字库 
************************************************************************

有的时候程序会运行报错：


.. code-block:: 

    找不到字库文件。

这种提示和上面不是一回事。找不到字库有两种可能：

1、littleFS工作不正常，没有上传成功

2、压根没有就没有上传字库文件

在data目录下有x.font文件并不代表你就上传了，如果你没有修改python进行配置自动上传，则必须手动上传字库到falsh空间。
x.font文件放在data目录下是一种上传标准，platformio有个upload的操作点击后可以上传data目录下的所有文件。
具体请请查阅platformio如何上传数据到单片机的相关内容。




如何支持多字体，多字号文字的显示
************************************************************************
1，使用getunicodeV3.py创建字库文件，但是这个时候不建议创建完全字符集的字库，太大了；你需要显示什么就修改python文件中的FONT_ALL中对应的内容
2，上传字库到单片机flash中；
3，调用reInitZHiku重新初始化字库；
4，显示汉字；

如下代码所示。


.. code-block:: 

    // 下面的代码展示了如何对于多字体的支持
    _xFont->reInitZhiku("/x_simkai.ttf_18_b64.font");
    _xFont->DrawChineseEx(0, 0, "书山有路", c);

    _xFont->reInitZhiku("/x_simsun.ttc_18_b64.font");
    _xFont->DrawChineseEx(0, 30, "书山有路", c);

    _xFont->reInitZhiku("/x_simhei.ttf_18_b64.font");
    _xFont->DrawChineseEx(0, 62, "书山有路", c);

    _xFont->reInitZhiku("/x_simfang.ttf_18_b64.font");
    _xFont->DrawChineseEx(0, 92, "书山有路", c);


注意：系统默认调用的字库是x.font,如果reInitZhiku一种字库后，x.font的配置被覆盖，如果要使用x.font，必须reInitZhiku('/x.font')才可以正常调用。


如何释放内存占用
************************************************************************

为了显示的更快，方便检索，字库的基础数据是读入了内存中的，大约占用了40k,在内存空间较大的esp32系列下基本不会有啥影响，但是在esp 8266下这个内存就比较宝贵了，因此提供了以下方法释放内存

.. code-block:: 

    _xFont->clear();

或者销毁对象：

.. code-block:: 

    delete _xFont;

不论那种方法，都能生效，但是如果要重新显示的话就必须重新初始化对象；


PIL库停止维护问题
************************************************************************

python 文件 getunicodeV3.py 使用了PIL库，请安装 Pillow 库，兼容



不同屏幕驱动的配置调整
************************************************************************

在 xfont.c下面的代码中

.. code-block:: c



    #ifdef ARDUINO_GFX

        Arduino_DataBus *bus = create_default_Arduino_DataBus();
        Arduino_GFX *tft = new Arduino_ST7735(bus);
        #define GFX_BL DF_GFX_BL

    #elif defined(TFT_ESPI)
        TFT_eSPI tft = TFT_eSPI();
    #endif    


调整不同的配置支持不同的TFT驱动芯片，Arduino_GFX 需要修改上面的 Arduino_ST7735， 在TFT_eSPI中需要调整那个user_select.ini文件。
有兴趣的朋友也可以参考 https://github.com/StarCompute/tftziku/issues/3 中这位朋友的方式。


显示为什么是倾倒的
************************************************************************

因为个人习惯，tft屏幕显示设置了旋转，可以自行调整  ``tft->setRotation(1);  `` .


如何让你的platformio 运行的更高效
************************************************************************

开启platformio的缓存模式，在platformio.ini中加入：

.. code-block:: 

    [platformio]
    build_cache_dir	=	cache

然后，platformio就会用磁盘换性能，编译过的文件将不在编译，极大的提高性能。



什么样的提问我会不予理睬
************************************************************************

非常感谢大家使用这个开源项目，希望可以为你带来帮助；但是我不是万能的，不可能知道你在做什么和如何做
有人留言如下 ：

.. code-block:: 

   想问一下为什么总是显示库有问题呀

.. code-block:: 


    复制你的代码，编译代码出错，为什么😳

这种不清不楚的留言，哪怕我有百分百诚意，也是无法提供帮助的。说的基础一点至少要提供编译或者运行时错误才能知道发生了啥。



致谢
************************************************************************

justdomyself 